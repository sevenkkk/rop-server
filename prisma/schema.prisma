// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户
model User {
  id        Int        @id @default(autoincrement())
  username  String     @unique
  password  String
  account   Account?
  userTeams UserTeam[]
}

// 团队
model Team {
  id          Int        @id @default(autoincrement())
  key         String
  name        String?
  description String?
  account     Account?
  userTeams   UserTeam[]
}

model UserTeam {
  userId Int
  teamId Int
  role   Role @default(USER)
  user   User @relation(fields: [userId], references: [id])
  team   Team @relation(fields: [teamId], references: [id])

  @@id([userId, teamId])
}

// 账户
model Account {
  id         String      @id
  userId     Int?        @unique
  user       User?       @relation(fields: [userId], references: [id])
  teamId     Int?        @unique
  team       Team?       @relation(fields: [teamId], references: [id])
  accessKeys AccessKey[]
  projects   Project[]
}

// 访问秘钥
model AccessKey {
  id          Int       @id @default(autoincrement())
  accessKey   String    @unique
  description String?
  expiration  DateTime?
  enabled     Boolean   @default(true)
  accountId   String
  account     Account   @relation(fields: [accountId], references: [id])

  @@unique([accountId, accessKey])
}

// 项目
model Project {
  id          String    @id
  name        String // 英文
  framework   Framework
  description String?
  accountId   String
  account     Account   @relation(fields: [accountId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  versions    Version[]
  branch      Branch[]

  @@unique([name, accountId])
}

model Branch {
  id              Int              @id @default(autoincrement())
  branch          String
  projectId       String
  project         Project          @relation(fields: [projectId], references: [id])
  versions        Version[]
  releaseVersions ReleaseVersion[]

  @@unique([branch, projectId])
}

model ReleaseVersion {
  projectId String
  branchId  Int
  platform  Platform
  versionId Int      @unique
  version   Version  @relation(fields: [versionId], references: [id])
  Branch    Branch   @relation(fields: [branchId], references: [id])

  @@id([projectId, branchId, platform])
}

// 版本管理
model Version {
  id             Int             @id @default(autoincrement())
  version        String // 版本 格式为 1.1.1
  path           String // 文件存储路径
  sigPath        String? // 签名文件存储路径
  signature      String? // 签名
  platform       Platform // 平台
  arch           String? // 计算机的体系结构
  notes          String? // 发布描述
  projectId      String // 项目Id
  Project        Project         @relation(fields: [projectId], references: [id])
  release        Boolean         @default(false) // 是否已经发布
  branchId       Int
  branch         Branch          @relation(fields: [branchId], references: [id])
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  ReleaseVersion ReleaseVersion?

  @@unique([projectId, branchId, version, platform, arch])
}

// accountId => seven-000000000
// kumao-111111111
// accountId/plan/branch/version/xxxx.apk
// plan-00000000/master/0.0.1/plan.apk

// path: /213123123123213123213121234123123123/branch/version/xxxx.apk
// 客户  url

//

// params: accessKey, projectKey, branch, version, file
// 生成json

// 权限
enum Role {
  USER
  ADMIN
}

// 框架
enum Framework {
  TAURI
  IONIC
  FLUTTER
}

// 平台
enum Platform {
  Android
  IOS
  Windows
  MacOS
  H5
}
