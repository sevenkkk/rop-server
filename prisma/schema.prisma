// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户
model User {
  id        Int        @id @default(autoincrement())
  username  String     @unique
  password  String
  Account   Account?
  UserTeams UserTeam[]
}

// 团队
model Team {
  id          Int        @id @default(autoincrement())
  key         String     @unique
  description String?
  Account     Account?
  UserTeams   UserTeam[]
}

model UserTeam {
  userId Int
  teamId Int
  role   Role @default(USER)
  User   User @relation(fields: [userId], references: [id])
  Team   Team @relation(fields: [teamId], references: [id])

  @@id([userId, teamId])
}

// 账户
model Account {
  id         String      @id
  userId     Int?        @unique
  User       User?       @relation(fields: [userId], references: [id])
  teamId     Int?        @unique
  Team       Team?       @relation(fields: [teamId], references: [id])
  AccessKeys AccessKey[]
  Projects   Project[]
}

// 访问秘钥
model AccessKey {
  id          Int       @id @default(autoincrement())
  accessKey   String    @unique
  description String?
  expiration  DateTime?
  enabled     Boolean   @default(true)
  accountId   String
  Account     Account   @relation(fields: [accountId], references: [id])
}

// 项目
model Project {
  id          String    @id
  key         String
  name        String
  framework   Framework
  description String?
  accountId   String
  Account     Account   @relation(fields: [accountId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Versions    Version[]
  Branch      Branch[]

  @@unique([key, accountId])
}

model Branch {
  id               Int       @id @default(autoincrement())
  key              String
  branchName       String
  projectId        String
  Project          Project   @relation(fields: [projectId], references: [id])
  Versions         Version[]
  releaseVersionId Int?      @unique
  RealseVersion    Version?  @relation("release", fields: [releaseVersionId], references: [id])

  @@unique([key, projectId])
}

// 版本管理
model Version {
  id            Int      @id @default(autoincrement())
  version       String // 版本 格式为 1.1.1
  path          String // 文件存储路径
  sigPath       String? // 签名
  platform      Platform // 平台
  projectId     String // 项目Id
  Project       Project  @relation(fields: [projectId], references: [id])
  release       Boolean  @default(false) // 是否已经发布
  branchId      Int
  Branch        Branch   @relation(fields: [branchId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  ReleaseBranch Branch?  @relation("release")

  @@unique([projectId, branchId, version])
}

// path: /key-projectId/branch/version/xxxx.apk
// params: accessKey, projectKey, branch, version, file

// 权限
enum Role {
  USER
  ADMIN
}

// 框架
enum Framework {
  TAURI
  IONIC
}

// 平台
enum Platform {
  Android
  IOS
  Windows
  MacOS
  H5
}
